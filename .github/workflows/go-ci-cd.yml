name: Go CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: "my-go-app"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Run linters
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run ./...

      - name: Run tests
        run: go test -v ./...

  docker-publish:
    needs: test
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Verify tag trigger
        run: |
          echo "✔ Job triggered by tag: $GITHUB_REF"
          if [[ ! "$GITHUB_REF" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Tag format incorrect. Expected vX.Y.Z"
            exit 1
          fi

      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "✔ Extracted version: $VERSION"

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=$GITHUB_REPOSITORY

      - name: Success message
        run: |
          echo "✔ Successfully published Docker images"
          echo "Image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}"
          echo "Tags: latest, ${{ steps.version.outputs.version }}"
          echo "View on Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}/tags"